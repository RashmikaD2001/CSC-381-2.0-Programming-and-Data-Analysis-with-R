LT_data_pw <- LT_data %>% pivot_wider(names_from = type, values_from = cases)
View(LT_data_pw)
rm(LT_data_pw)
LT_data <- LT_tibble %>% select(date,type,cases) %>%skim()
LT_data <- LT_tibble %>% select(date,type,cases)
LT_data %>%skim()
LT_data %>%skim()
LT_data_pw <- LT_data %>% pivot_wider(names_from = type, values_from = cases)
View(LT_data_pw)
LT_data_pw %>% ggplot(aes(x = date, y = confirmed)) + geom_line(color = "red")+labs(x= "Dates", y= "Confirmed cases",title = "Confirmed cases")
library(coronavirus)
library(tidyverse)
library(broom)
library(skimr)
ggplot(LT_data_pw, aes(x = date, y = confirmed)) + geom_line() + facet_grid(~year) + theme(legend.position = "bottom") + labs(title = "LT", x = "confirm" , y = "number")
library(devtools)
devtools::install_github("thiyangt/sta3262")
library(sta3262)
get_individual_project_country("AS2021563")
# get_individual_project_country("AS2021563")
# [1] "Lithuania"
library(coronavirus)
library(tidyverse)
library(broom)
library(skimr)
coronaTibble <- as_tibble(coronavirus)
# LT = Lithuania
LT_tibble <- coronaTibble %>% filter(country == "Lithuania")
LT_data <- LT_tibble %>% select(date,type,cases)
LT_data_pw <- LT_data %>% pivot_wider(names_from = type, values_from = cases) %>%
mutate(date = as.Date(date, format = "%Y-%m-%d"),  year = year(date))
LT_data_pw %>%skim()
x <- LT_data_pw %>% filter(confirmed<0 | recovery < 0 | death<0)
ggplot(LT_data_pw, aes(x = date, y = confirmed)) + geom_line() + facet_grid(~year) + theme(legend.position = "bottom") + labs(title = "LT", x = "confirm" , y = "number")
LT_data_pw %>% ggplot(aes(x = date, y = confirmed)) + geom_line(color = "red")+labs(x= "Dates", y= "Confirmed cases",title = "Confirmed cases")
LT_data_pw %>%
ggplot(aes(x = date, y = confirmed)) +
geom_line(color = "red") +
labs(x = "Dates", y = "Confirmed cases", title = "Confirmed cases") +
scale_y_continuous(
breaks = seq(0, max(LT_data_pw$confirmed), by = 2000)
)
LT_corona_2022 <- LT_data_pw %>% filter(year == 2022)
LT_corona_2022 %>% ggplot(aes(x = date, y = confirmed)) + geom_line() +
labs(x= "Dates", y= "Confirmed cases",title = "Confirmed cases")
sum(LT_data_pw$death)
sum(LT_data_pw$confirmed)
summary(LT_data_pw$confirmed)
LT_data %>% filter(type %in% c("confirmed", "death")) %>%
ggplot(aes(x = date, y = cases, col = type)) + geom_line() +
labs(x = "Date", y = "Cases", title = "Cases Over Time for Selected Types") +
theme_minimal()
# https://koronastop.lrv.lt/en/news?page=1
library(maps)
world <- map_data("world")
LT <- world %>% filter(region == "Lithuania")
ggplot(AUS) +
geom_polygon(aes(x = long, y = lat, group = group))
library(devtools)
devtools::install_github("thiyangt/sta3262")
library(sta3262)
get_individual_project_country("AS2021563")
# get_individual_project_country("AS2021563")
# [1] "Lithuania"
library(coronavirus)
library(tidyverse)
library(broom)
library(skimr)
coronaTibble <- as_tibble(coronavirus)
# LT = Lithuania
LT_tibble <- coronaTibble %>% filter(country == "Lithuania")
LT_data <- LT_tibble %>% select(date,type,cases)
LT_data_pw <- LT_data %>% pivot_wider(names_from = type, values_from = cases) %>%
mutate(date = as.Date(date, format = "%Y-%m-%d"),  year = year(date))
LT_data_pw %>%skim()
x <- LT_data_pw %>% filter(confirmed<0 | recovery < 0 | death<0)
ggplot(LT_data_pw, aes(x = date, y = confirmed)) + geom_line() + facet_grid(~year) + theme(legend.position = "bottom") + labs(title = "LT", x = "confirm" , y = "number")
LT_data_pw %>% ggplot(aes(x = date, y = confirmed)) + geom_line(color = "red")+labs(x= "Dates", y= "Confirmed cases",title = "Confirmed cases")
LT_data_pw %>%
ggplot(aes(x = date, y = confirmed)) +
geom_line(color = "red") +
labs(x = "Dates", y = "Confirmed cases", title = "Confirmed cases") +
scale_y_continuous(
breaks = seq(0, max(LT_data_pw$confirmed), by = 2000)
)
LT_corona_2022 <- LT_data_pw %>% filter(year == 2022)
LT_corona_2022 %>% ggplot(aes(x = date, y = confirmed)) + geom_line() +
labs(x= "Dates", y= "Confirmed cases",title = "Confirmed cases")
sum(LT_data_pw$death)
sum(LT_data_pw$confirmed)
summary(LT_data_pw$confirmed)
LT_data %>% filter(type %in% c("confirmed", "death")) %>%
ggplot(aes(x = date, y = cases, col = type)) + geom_line() +
labs(x = "Date", y = "Cases", title = "Cases Over Time for Selected Types") +
theme_minimal()
# https://koronastop.lrv.lt/en/news?page=1
neighbors <- coronaTibble %>%
filter(country %in% c("Latvia", "Belarus", "Moldova", "Poland","Lithuania")) %>% select(date,country,type,cases,lat,long) %>% pivot_wider(names_from = type, values_from = cases)
eu_continent <- coronaTibble %>% filter(country != "Lithuania" & continent_name == "Europe") %>% pivot_wider(names_from = type, values_from = cases)
rm(eu_continent)
View(coronavirus)
hdi_index <- coronaTibble %>% filter(country %in% c("Poland","Latvia","Croatia","Bahrain","Qatar","Lithuania")) %>% select(date,country,type,cases,lat,long) %>% pivot_wider(names_from = type, values_from = cases)
View(hdi_index)
hdi_index <- coronaTibble %>% filter(country %in% c("Poland","Latvia","Croatia","Bahrain","Qatar","Lithuania")) %>% select(date,country,province,type,cases,lat,long) %>% pivot_wider(names_from = type, values_from = cases)
View(hdi_index)
hdi_index %>% filter(confirmed<0 | recovery < 0 | death<0)
View(world)
View(x)
print(hdi_index %>% filter(confirmed<0 | recovery < 0 | death<0))
print(hdi_index %>% filter(confirmed<0 | recovery < 0 | death<0))
> print(neighbors %>% filter(confirmed<0 | recovery < 0 | death<0))
print(neighbors %>% filter(confirmed<0 | recovery < 0 | death<0))
tt <- LT_data %>% group_by(type, date) %>%
summarise(total_cases = sum(cases)) %>%
pivot_wider(names_from = type, values_from = total_cases) %>%
arrange(date) %>%
mutate(active = confirmed - death - recovery) %>%
mutate(active_total = cumsum(active),
recovered_total = cumsum(recovery),
death_total = cumsum(death))
View(tt)
View(LT_data)
View(LT_data_pw)
View(LT_tibble)
install.packages("ggmap")
library(ggplot2)
library(ggmap)
# Define coordinates for Lithuania
lithuania_coords <- c(lon = 23.8813, lat = 55.1694)
# Get a base map centered on Lithuania
map_data <- get_map(location = lithuania_coords, zoom = 7, maptype = "terrain")
install.packages("maps")
library(maps)
install.packages("leaflet")
library(leaflet)
# Define coordinates for Lithuania
lithuania_lat <- 55.1694
lithuania_long <- 23.8813
# Create an interactive map centered on Lithuania
lt_map <- leaflet() %>%
addTiles() %>%
setView(lng = lithuania_long, lat = lithuania_lat, zoom = 7) %>%
addMarkers(lng = lithuania_long, lat = lithuania_lat, popup = "Lithuania")
lt_map
install.packages(c("sf", "rnaturalearth", "rnaturalearthdata"))
library(sf)
library(rnaturalearth)
# Get world map data
world <- ne_countries(scale = "medium", returnclass = "sf")
# Define coordinates for Lithuania
lithuania_lat <- 55.1694
lithuania_long <- 23.8813
# Create a data frame for Lithuania
lithuania_df <- data.frame(
country = "Lithuania",
lat = lithuania_lat,
long = lithuania_long
)
# Convert to sf object
lithuania_sf <- st_as_sf(lithuania_df, coords = c("long", "lat"), crs = 4326)
# Plot the map
ggplot(data = world) +
geom_sf(fill = "lightgrey") +
geom_sf(data = lithuania_sf, color = "red", size = 4) +
labs(title = "Map of Lithuania", x = "Longitude", y = "Latitude") +
theme_minimal()
# Get world map data
world <- ne_countries(scale = "medium", returnclass = "sf")
# Define coordinates and bounding box for Lithuania
lithuania_lat <- 55.1694
lithuania_long <- 23.8813
bbox <- c(left = 20, bottom = 50, right = 30, top = 60)  # Adjust bounds as needed
# Create a data frame for Lithuania
lithuania_df <- data.frame(
country = "Lithuania",
lat = lithuania_lat,
long = lithuania_long
)
# Convert to sf object
lithuania_sf <- st_as_sf(lithuania_df, coords = c("long", "lat"), crs = 4326)
# Plot the map with adjusted bounds
ggplot(data = world) +
geom_sf(fill = "lightgrey") +
geom_sf(data = lithuania_sf, color = "red", size = 4) +
coord_sf(xlim = c(bbox["left"], bbox["right"]), ylim = c(bbox["bottom"], bbox["top"]), expand = FALSE) +
labs(title = "Map of Lithuania", x = "Longitude", y = "Latitude") +
theme_minimal()
bbox <- c(left = 50, bottom = 50, right = 50, top = 60)  # Adjust bounds as needed
# Create a data frame for Lithuania
lithuania_df <- data.frame(
country = "Lithuania",
lat = lithuania_lat,
long = lithuania_long
)
# Convert to sf object
lithuania_sf <- st_as_sf(lithuania_df, coords = c("long", "lat"), crs = 4326)
# Plot the map with adjusted bounds
ggplot(data = world) +
geom_sf(fill = "lightgrey") +
geom_sf(data = lithuania_sf, color = "red", size = 4) +
coord_sf(xlim = c(bbox["left"], bbox["right"]), ylim = c(bbox["bottom"], bbox["top"]), expand = FALSE) +
labs(title = "Map of Lithuania", x = "Longitude", y = "Latitude") +
theme_minimal()
world <- ne_countries(scale = "medium", returnclass = "sf")
# Define coordinates and bounding box for Lithuania
lithuania_lat <- 55.1694
lithuania_long <- 23.8813
bbox <- c(left = 50, bottom = 50, right = 50, top = 60)  # Adjust bounds as needed
# Create a data frame for Lithuania
lithuania_df <- data.frame(
country = "Lithuania",
lat = lithuania_lat,
long = lithuania_long
)
# Convert to sf object
lithuania_sf <- st_as_sf(lithuania_df, coords = c("long", "lat"), crs = 4326)
# Plot the map with adjusted bounds
ggplot(data = world) +
geom_sf(fill = "lightgrey") +
geom_sf(data = lithuania_sf, color = "red", size = 4) +
coord_sf(xlim = c(bbox["left"], bbox["right"]), ylim = c(bbox["bottom"], bbox["top"]), expand = FALSE) +
labs(title = "Map of Lithuania", x = "Longitude", y = "Latitude") +
theme_minimal()
library(sf)
library(rnaturalearth)
# Get world map data
world <- ne_countries(scale = "medium", returnclass = "sf")
# Define coordinates and bounding box for Lithuania
lithuania_lat <- 55.1694
lithuania_long <- 23.8813
bbox <- c(left = 20, bottom = 50, right = 30, top = 60)  # Adjust bounds as needed
# Create a data frame for Lithuania
lithuania_df <- data.frame(
country = "Lithuania",
lat = lithuania_lat,
long = lithuania_long
)
# Convert to sf object
lithuania_sf <- st_as_sf(lithuania_df, coords = c("long", "lat"), crs = 4326)
# Plot the map with adjusted bounds
ggplot(data = world) +
geom_sf(fill = "lightgrey") +
geom_sf(data = lithuania_sf, color = "red", size = 4) +
coord_sf(xlim = c(bbox["left"], bbox["right"]), ylim = c(bbox["bottom"], bbox["top"]), expand = FALSE) +
labs(title = "Map of Lithuania", x = "Longitude", y = "Latitude") +
theme_minimal()
world <- ne_countries(scale = "medium", returnclass = "sf")
# Define coordinates and bounding box for Lithuania
lithuania_lat <- 55.1694
lithuania_long <- 23.8813
bbox <- c(left = 50, bottom = 50, right = 50, top = 60)  # Adjust bounds as needed
# Create a data frame for Lithuania
lithuania_df <- data.frame(
country = "Lithuania",
lat = lithuania_lat,
long = lithuania_long
)
# Convert to sf object
lithuania_sf <- st_as_sf(lithuania_df, coords = c("long", "lat"), crs = 4326)
# Plot the map with adjusted bounds
ggplot(data = world) +
geom_sf(fill = "lightgrey") +
geom_sf(data = lithuania_sf, color = "red", size = 4) +
coord_sf(xlim = c(bbox["left"], bbox["right"]), ylim = c(bbox["bottom"], bbox["top"]), expand = FALSE) +
labs(title = "Map of Lithuania", x = "Longitude", y = "Latitude") +
theme_minimal()
library(sf)
library(rnaturalearth)
# Get world map data
world <- ne_countries(scale = "medium", returnclass = "sf")
# Define coordinates and bounding box for Lithuania
lithuania_lat <- 55.1694
lithuania_long <- 23.8813
bbox <- c(left = 20, bottom = 50, right = 30, top = 60)  # Adjust bounds as needed
# Create a data frame for Lithuania
lithuania_df <- data.frame(
country = "Lithuania",
lat = lithuania_lat,
long = lithuania_long
)
# Convert to sf object
lithuania_sf <- st_as_sf(lithuania_df, coords = c("long", "lat"), crs = 4326)
# Plot the map with adjusted bounds
ggplot(data = world) +
geom_sf(fill = "lightgrey") +
geom_sf(data = lithuania_sf, color = "red", size = 4) +
coord_sf(xlim = c(bbox["left"], bbox["right"]), ylim = c(bbox["bottom"], bbox["top"]), expand = FALSE) +
labs(title = "Map of Lithuania", x = "Longitude", y = "Latitude") +
theme_minimal()
library(leaflet)
# Define coordinates for Lithuania
lithuania_lat <- 55.1694
lithuania_long <- 23.8813
# Create an interactive map centered on Lithuania
lt_map <- leaflet() %>%
addTiles() %>%
setView(lng = lithuania_long, lat = lithuania_lat, zoom = 7) %>%
addMarkers(lng = lithuania_long, lat = lithuania_lat, popup = "Lithuania")
lt_map
world_map <- map_data("world")
# Filter for Lithuania
lithuania_map <- world_map %>% filter(region == "Lithuania")
# Example dataset for Lithuania
# Make sure 'lithuania_corona' has 'long' and 'lat' columns
# lithuania_corona <- data.frame(
#   long = c(23.8813),  # Example longitude
#   lat = c(55.1694)    # Example latitude
# )
# Plot the map
p <- ggplot() +
geom_polygon(
data = lithuania_map,
aes(x = long, y = lat, group = group),
fill = "slategray2",
color = "black"
) +
coord_cartesian(xlim = c(20, 30), ylim = c(50, 60)) +  # Adjust to Lithuania's bounds
scale_x_continuous(breaks = seq(20, 30, 2)) +
scale_y_continuous(breaks = seq(50, 60, 2))
# Plot data points for Lithuania
p + geom_point(
data = lithuania_corona,
aes(x = long, y = lat),
color = "red",
size = 1.5
) +
labs(title = "COVID-19 Data for Lithuania", x = "Longitude", y = "Latitude")
# Load the world map data
world_map <- map_data("world")
# Filter for Lithuania
lithuania_map <- world_map %>% filter(region == "Lithuania")
# Example dataset for Lithuania
# Make sure 'lithuania_corona' has 'long' and 'lat' columns
# lithuania_corona <- data.frame(
#   long = c(23.8813),  # Example longitude
#   lat = c(55.1694)    # Example latitude
# )
# Plot the map
p <- ggplot() +
geom_polygon(
data = lithuania_map,
aes(x = long, y = lat, group = group),
fill = "slategray2",
color = "black"
) +
coord_cartesian(xlim = c(20, 30), ylim = c(50, 60)) +  # Adjust to Lithuania's bounds
scale_x_continuous(breaks = seq(20, 30, 2)) +
scale_y_continuous(breaks = seq(50, 60, 2))
# Plot data points for Lithuania
p + geom_point(
data = LT_tibble,
aes(x = long, y = lat),
color = "red",
size = 1.5
) +
labs(title = "COVID-19 Data for Lithuania", x = "Longitude", y = "Latitude")
# Load the world map data
world_map <- map_data("world")
# Filter for Lithuania
lithuania_map <- world_map %>% filter(region == "Lithuania")
# Plot the world map
p <- ggplot() +
geom_polygon(
data = world_map,
aes(x = long, y = lat, group = group),
fill = "lightgray",
color = "black"
) +
geom_polygon(
data = lithuania_map,
aes(x = long, y = lat, group = group),
fill = "slategray2",
color = "black"
) +
coord_fixed(ratio = 1.5) +  # Maintain aspect ratio
labs(title = "World Map Highlighting Lithuania", x = "Longitude", y = "Latitude") +
theme_minimal()
p
View(LT_data_pw)
install.packages("magrittr")
knitr::opts_chunk$set(echo = TRUE)
library(coronavirus)
library(tidyverse)
library(skimr)
library(magrittr)
View(tt)
cc <- LT_data_pw
View(cc)
cc %>% mutate(death = ifelse(death<0,0,death),
recovery = ifelse(recovery<0,0,recovery),
confirmed = ifelse(confirmed<0,0,confirmed))
View(cc)
cc <- cc %>% mutate(death = ifelse(death<0,0,death),
recovery = ifelse(recovery<0,0,recovery),
confirmed = ifelse(confirmed<0,0,confirmed))
aws <- coronavirus %>%
group_by(type, date) %>%
summarise(total_cases = sum(cases)) %>%
pivot_wider(names_from = type, values_from = total_cases) %>%
arrange(date) %>%
mutate(active = confirmed - death - recovery) %>%
mutate(active_total = cumsum(active),
recovered_total = cumsum(recovery),
death_total = cumsum(death))
View(aws)
coronavirus %>% summarise(total_cases = sum(cases))
ppp <- LT_data_pw %>% mutate(active = confirmed - death - recovery) %>%
mutate(active_total = cumsum(active),
recovered_total = cumsum(recovery),
death_total = cumsum(death))
ppp
View(ppp)
ppp %>% ggplot(aes(x = date, y = active)) + geom_line()
View(coronavirus)
View(LT_tibble)
View(aws)
install.packages("knitr")
install.packages("kableExtra")
install.packages("summarytools")
install.packages("sjPlot")
sum(LT_data_pw$recovery)
library(coronavirus)
library(tidyverse)
library(skimr)
library(magrittr)
# filter the Lithuania data from the dataset
lt_corona_data <- coronavirus %>%
filter(country == "Lithuania") %>%
select(date,type,cases) %>%
pivot_wider(names_from = type, values_from = cases) %>%
mutate(date = as.Date(date, format = "%Y-%m-%d"),  year = year(date))
# record minus values as zeros
lt_corona_data <- lt_corona_data %>%
mutate(death = ifelse(death<0,0,death),
recovery = ifelse(recovery<0,0,recovery),
confirmed =ifelse(confirmed<0,0,confirmed))
# calculate active cases, total active, total recovery,total death for each day
lt_corona_data <- lt_corona_data %>%
mutate(active = ifelse(confirmed - death - recovery < 0, 0, confirmed - death - recovery)) %>%
mutate(active_total =cumsum(active),
recovered_total = cumsum(recovery),
death_total = cumsum(death))
View(lt_corona_data)
sum(lt_corona_data$recovery)
aws %>% filter(max(recovery))
print(aws %>% filter(max(recovery)))
filtered_rows <- aws %>%
filter(recovery == max(recovery, na.rm = TRUE))
# Print the filtered rows
print(filtered_rows)
View(aws)
View(lt_corona_data)
View(lt_corona_data)
lt_corona_data %>% filter(recovery == max(recovery))
lt_corona_data[391,4]
install.packages("gridExtra")
install.packages("plotly")
neighbors %>% ggplot(aes(x = confirmed, y = date, colour = country)) + geom_line()
View(LT_data_pw)
View(LT_tibble)
lt_corona_data %>% filter(death = max(death))
lt_corona_data %>% filter(death == max(death))
lt_corona_data %>% filter(active == max(active))
View(lt_corona_data)
max_recovery_total <- max(neighboring_countries$recovery_total, na.rm = TRUE)
neighboring_countries <- coronavirus %>%
filter(country %in% c("Latvia", "Belarus", "Moldova", "Poland","Lithuania")) %>%
select(date,country,type,cases,lat,long) %>% pivot_wider(names_from = type,
values_from = cases)
neighboring_countries <- neighboring_countries %>%
mutate(death = ifelse(death<0,0,death),
recovery = ifelse(recovery<0,0,recovery),
confirmed =ifelse(confirmed<0,0,confirmed))
neighboring_countries <- neighboring_countries %>%
mutate(active = ifelse(confirmed - death - recovery < 0, 0, confirmed - death - recovery)) %>%
mutate(active_total =cumsum(active),
recovered_total = cumsum(recovery),
death_total = cumsum(death))
max_recovery_total <- max(neighboring_countries$recovery_total, na.rm = TRUE)
View(neighboring_countries)
knitr::opts_chunk$set(echo = TRUE)
lt_corona_data <- coronavirus %>%
filter(country == "Lithuania") %>%
select(date,type,cases) %>%
pivot_wider(names_from = type, values_from = cases) %>%
mutate(date = as.Date(date, format = "%Y-%m-%d"),  year = year(date))
library(coronavirus)
library(tidyverse)
library(skimr)
library(magrittr)
library(gridExtra)
library(plotly)
# filter the Lithuania data from the dataset
lt_corona_data <- coronavirus %>%
filter(country == "Lithuania") %>%
select(date,type,cases) %>%
pivot_wider(names_from = type, values_from = cases) %>%
mutate(date = as.Date(date, format = "%Y-%m-%d"),  year = year(date))
# record minus values as zeros
lt_corona_data <- lt_corona_data %>%
mutate(death = ifelse(death<0,0,death),
recovery = ifelse(recovery<0,0,recovery),
confirmed =ifelse(confirmed<0,0,confirmed))
# calculate active cases, total active, total recovery,total death for each day
lt_corona_data <- lt_corona_data %>%
mutate(active = ifelse(confirmed - death - recovery < 0, 0, confirmed - death - recovery)) %>%
mutate(active_total =cumsum(active),
recovered_total = cumsum(recovery),
death_total = cumsum(death))
lt_corona_data[391,4] <- (lt_corona_data[390,4] + lt_corona_data[392,4])/2
est <- coronavirus %>% filter(country == "Estonia")
View(est)
